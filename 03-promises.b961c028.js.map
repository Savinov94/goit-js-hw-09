{"mappings":"YAAA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACT,IAAMC,EAAgB,CAAET,WAAUC,SAE9BI,EACFF,EAAQM,GAERL,EAAOK,E,GAERR,E,IAIP,IAAMS,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKE,cAAc,uBAChCE,EAAYJ,EAAKE,cAAc,sBAC/BG,EAAcL,EAAKE,cAAc,wBAEvCF,EAAKM,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAEN,IAAMC,EAAQC,SAASP,EAAWQ,OAC5BC,EAAOF,SAASN,EAAUO,OAC1BE,EAASH,SAASL,EAAYM,OAEpC,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,IAAWJ,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EACrFE,MAAM,+DAIR,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,IAC3B3B,EAAc2B,EAAGP,GAAOQ,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACxC4B,QAAQC,IAAI,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IACzD+B,OAAM,SAAAJ,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACpB4B,QAAQC,IAAI,sBAAqCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAGzDkB,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      const promiseResult = { position, delay };\n\n      if (shouldResolve) {\n        resolve(promiseResult);\n      } else {\n        reject(promiseResult);\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\nconst delayInput = form.querySelector('input[name=\"delay\"]');\nconst stepInput = form.querySelector('input[name=\"step\"]');\nconst amountInput = form.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount) || delay < 0 || step < 0 || amount <= 0) {\n    alert('Please enter valid values for delay, step, and amount.');\n    return;\n  }\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay).then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    }).catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n    delay += step;\n  }\n});"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","promiseResult","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","event","preventDefault","delay1","parseInt","value","step","amount","isNaN","alert","i","then","param","console","log","concat","catch"],"version":3,"file":"03-promises.b961c028.js.map"}